---
name: unit-test
# FIXME: This should be a reusable workflow

on:
    push:
        paths:
            - 'src/**'
            - 'cmake/**'
            - 'tests/**'
            - 'conanfile.py'
            - 'CMakeLists.txt'
            - '.github/workflows/unit-test.yml'
        branches:
            - main
            - 'CURA-*'
            - 'CT_fix'
        tags:
            - '[5-9].[0-9].+*'
    pull_request:
        paths:
            - 'src/**'
            - 'cmake/**'
            - 'tests/**'
            - 'conanfile.py'
            - 'CMakeLists.txt'
            - '.github/workflows/unit-test.yml'
        branches:
            - main
            - '[5-9].[0-9]'

env:
    CONAN_LOGIN_USERNAME_CURA: ${{ secrets.CONAN_USER }}
    CONAN_PASSWORD_CURA: ${{ secrets.CONAN_PASS }}
    CONAN_LOGIN_USERNAME_CURA_CE: ${{ secrets.CONAN_USER }}
    CONAN_PASSWORD_CURA_CE: ${{ secrets.CONAN_PASS }}
    CONAN_LOG_RUN_TO_OUTPUT: 1
    CONAN_LOGGING_LEVEL: ${{ inputs.conan_logging_level }}
    CONAN_NON_INTERACTIVE: 1

jobs:
    conan-recipe-version:
        uses: ultimaker/cura/.github/workflows/conan-recipe-version.yml@CURA-9365_fix_building_cura_main
        with:
            project_name: curaengine

    testing:
        runs-on: ubuntu-20.04
        needs: [ conan-recipe-version ]

        steps:
            -   name: Checkout CuraEngine
                uses: actions/checkout@v3

            -   name: Setup Python and pip
                uses: actions/setup-python@v4
                with:
                    python-version: '3.10.4'
                    architecture: 'x64'
                    cache: 'pip'
                    cache-dependency-path: .github/workflows/requirements-conan-package.txt

            -   name: Install Python requirements and Create default Conan profile
                run: |
                    pip install -r .github/workflows/requirements-conan-package.txt
                    conan profile new default --detect

            -   name: Use Conan download cache (Bash)
                if: ${{ runner.os != 'Windows' }}
                run: conan config set storage.download_cache="$HOME/.conan/conan_download_cache"

            -   name: Use Conan download cache (Powershell)
                if: ${{ runner.os == 'Windows' }}
                run: conan config set storage.download_cache="C:\Users\runneradmin\.conan\conan_download_cache"

            -   name: Cache Conan local repository packages (Bash)
                uses: actions/cache@v3
                if: ${{ runner.os != 'Windows' }}
                with:
                    path: |
                        $HOME/.conan/data
                        $HOME/.conan/conan_download_cache
                    key: conan-${{ runner.os }}-${{ runner.arch }}

            -   name: Cache Conan local repository packages (Powershell)
                uses: actions/cache@v3
                if: ${{ runner.os == 'Windows' }}
                with:
                    path: |
                        C:\Users\runneradmin\.conan\data
                        C:\.conan
                        C:\Users\runneradmin\.conan\conan_download_cache
                    key: conan-${{ runner.os }}-${{ runner.arch }}

            -   name: Install MacOS system requirements
                if:  ${{ runner.os == 'Macos' }}
                run: brew install autoconf automake ninja

            -   name: Install Linux system requirements
                if: ${{ runner.os == 'Linux' }}
                run: sudo apt install build-essential checkinstall zlib1g-dev libssl-dev ninja-build autoconf libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxvmc-dev libxxf86vm-dev xtrans-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev xkb-data libxcb-dri3-dev uuid-dev libxcb-util-dev -y

            -   name: Get Conan configuration from branch
                run: conan config install https://github.com/Ultimaker/conan-config.git -a "-b CURA-9177_Fix_CI_CD"  # FIXME: Once switched to master

            -   name: Install dependencies
                run: conan install . ${{ needs.conan-recipe-version.outputs.recipe_id_full }} -o enable_testing=True --build=missing --update

            -   name: Upload the Dependency package(s)
                run: conan upload "*" -r cura --all -c

            -   name: Run Unit Test CuraEngine
                id: run-test
                run: |
                    cmake --toolchain cmake-build-release/conan/conan_toolchain.cmake -S . -B cmake-build-release/
                    cmake --build cmake-build-release/
                    cd cmake-build-release/
                    ctest --output-junit engine_test.xml

            -   name: Publish Unit Test Results
                id: test-results
                uses: EnricoMi/publish-unit-test-result-action@v1
                if: ${{ always() }}
                with:
                    files: |
                        **/*.xml

            -   name: Conclusion
                run: echo "Conclusion is ${{ fromJSON( steps.test-results.outputs.json ).conclusion }}"